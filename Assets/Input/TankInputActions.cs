//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/TankInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TankInputActions"",
    ""maps"": [
        {
            ""name"": ""TankControl"",
            ""id"": ""5d26f70f-155d-46f2-83fa-11680c501889"",
            ""actions"": [
                {
                    ""name"": ""BodyMovement"",
                    ""type"": ""Value"",
                    ""id"": ""e9a8262c-a071-4833-a8ef-1c47e6189bca"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurretMovement_Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""3deba12a-8d21-4338-8669-6f7c82784a64"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurretMovement_Stick"",
                    ""type"": ""Value"",
                    ""id"": ""e3834e7e-ea4a-4725-8994-69f9afcc1b26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ff38da97-5b5c-4c2a-93df-18f27743fe9f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BodyMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9671defe-5d22-48da-bf18-e6566a24874b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard+Mouse"",
                    ""action"": ""BodyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a19b0d28-2f6d-4494-abc9-38fc05222e65"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard+Mouse"",
                    ""action"": ""BodyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""da1cfadd-bc84-4239-9d95-b108e91a2a93"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard+Mouse"",
                    ""action"": ""BodyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a9ae406c-b749-448b-8b0b-65723b00c698"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard+Mouse"",
                    ""action"": ""BodyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1fdc7791-3616-4a98-97a2-47200bf85a3b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BodyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f57ee9b-17a2-45e2-bedf-f7ca4e547a2a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard+Mouse"",
                    ""action"": ""TurretMovement_Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ab46186-67bd-4b96-a1f7-47d8410ff1ba"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""TurretMovement_Stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard+Mouse"",
            ""bindingGroup"": ""Keyboard+Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TankControl
        m_TankControl = asset.FindActionMap("TankControl", throwIfNotFound: true);
        m_TankControl_BodyMovement = m_TankControl.FindAction("BodyMovement", throwIfNotFound: true);
        m_TankControl_TurretMovement_Mouse = m_TankControl.FindAction("TurretMovement_Mouse", throwIfNotFound: true);
        m_TankControl_TurretMovement_Stick = m_TankControl.FindAction("TurretMovement_Stick", throwIfNotFound: true);
    }

    ~@TankInputActions()
    {
        UnityEngine.Debug.Assert(!m_TankControl.enabled, "This will cause a leak and performance issues, TankInputActions.TankControl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TankControl
    private readonly InputActionMap m_TankControl;
    private List<ITankControlActions> m_TankControlActionsCallbackInterfaces = new List<ITankControlActions>();
    private readonly InputAction m_TankControl_BodyMovement;
    private readonly InputAction m_TankControl_TurretMovement_Mouse;
    private readonly InputAction m_TankControl_TurretMovement_Stick;
    public struct TankControlActions
    {
        private @TankInputActions m_Wrapper;
        public TankControlActions(@TankInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BodyMovement => m_Wrapper.m_TankControl_BodyMovement;
        public InputAction @TurretMovement_Mouse => m_Wrapper.m_TankControl_TurretMovement_Mouse;
        public InputAction @TurretMovement_Stick => m_Wrapper.m_TankControl_TurretMovement_Stick;
        public InputActionMap Get() { return m_Wrapper.m_TankControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankControlActions set) { return set.Get(); }
        public void AddCallbacks(ITankControlActions instance)
        {
            if (instance == null || m_Wrapper.m_TankControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TankControlActionsCallbackInterfaces.Add(instance);
            @BodyMovement.started += instance.OnBodyMovement;
            @BodyMovement.performed += instance.OnBodyMovement;
            @BodyMovement.canceled += instance.OnBodyMovement;
            @TurretMovement_Mouse.started += instance.OnTurretMovement_Mouse;
            @TurretMovement_Mouse.performed += instance.OnTurretMovement_Mouse;
            @TurretMovement_Mouse.canceled += instance.OnTurretMovement_Mouse;
            @TurretMovement_Stick.started += instance.OnTurretMovement_Stick;
            @TurretMovement_Stick.performed += instance.OnTurretMovement_Stick;
            @TurretMovement_Stick.canceled += instance.OnTurretMovement_Stick;
        }

        private void UnregisterCallbacks(ITankControlActions instance)
        {
            @BodyMovement.started -= instance.OnBodyMovement;
            @BodyMovement.performed -= instance.OnBodyMovement;
            @BodyMovement.canceled -= instance.OnBodyMovement;
            @TurretMovement_Mouse.started -= instance.OnTurretMovement_Mouse;
            @TurretMovement_Mouse.performed -= instance.OnTurretMovement_Mouse;
            @TurretMovement_Mouse.canceled -= instance.OnTurretMovement_Mouse;
            @TurretMovement_Stick.started -= instance.OnTurretMovement_Stick;
            @TurretMovement_Stick.performed -= instance.OnTurretMovement_Stick;
            @TurretMovement_Stick.canceled -= instance.OnTurretMovement_Stick;
        }

        public void RemoveCallbacks(ITankControlActions instance)
        {
            if (m_Wrapper.m_TankControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITankControlActions instance)
        {
            foreach (var item in m_Wrapper.m_TankControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TankControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TankControlActions @TankControl => new TankControlActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard+Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ITankControlActions
    {
        void OnBodyMovement(InputAction.CallbackContext context);
        void OnTurretMovement_Mouse(InputAction.CallbackContext context);
        void OnTurretMovement_Stick(InputAction.CallbackContext context);
    }
}
